{"version":3,"sources":["/js/common.js"],"names":[],"mappings":"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","file":"/js/common.js","sourcesContent":["import * as THREE from 'three';\nimport { _ } from 'lodash';\n\nexport function CreateScene(app, conf) {\n  let __ = app;\n  var {innerWidth:canvasWidth, innerHeight:canvasHeight} = window;\n\n  var scene = new THREE.Scene();\n  // scene.fog = new THREE.Fog( 0x050505, 2000, 3500);\n  // scene.add(new THREE.AmbientLight(0xffffff, 1));\n\n  // var dirLight = new THREE.DirectionalLight( 0xffffff );\n  // dirLight.position.set( -100, 0, 100 ).normalize();\n\n  var renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: false,\n  });\n\n\n  renderer.setClearColor(__.conf.clearColor, __.conf.clearOpacity);\n  renderer.setSize(canvasWidth, canvasHeight);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  document.body.appendChild( renderer.domElement );\n\n  app.scene = scene;\n  // app.camera = camera;\n  app.renderer = renderer;\n\n  return app;\n}\n\n\n\nfunction Points__Grid(__) {\n  var bx = 300, by = 100, bz = 20;  \n  var cell = 5;\n\n  var geometry = new THREE.BufferGeometry();\n  var vertices = new Float32Array(bx * by * bz * 3);\n  var off = 0;\n  for (var i = 0; i < bx; i++) {\n    for (var j = 0; j < by; j++) {\n      for (var k = 0; k < bz; k++) {\n        vertices[off] = i * cell + Math.random() * cell;\n        vertices[off + 1] = j * cell + Math.random() * cell;\n        vertices[off + 2] = k * cell + Math.random() * cell;\n        off += 3;\n      }\n    }\n  }\n\n  geometry.addAttribute('position', \n    new THREE.BufferAttribute(vertices, 3));\n\n  geometry.computeBoundingSphere();\n  var colors = new Float32Array(bx * by * bz * 3);\n  off = 0;\n  for (var i = 0; i < bx; i++) {\n    for (var j = 0; j < by; j++) {\n      for (var k = 0; k < bz; k++) {\n        colors[off] = 1 - 0.7 * i / bx;\n        colors[off + 1] = 1 - 0.8 * j / by;\n        colors[off + 2] = 1 - 0.5 * k / bz;\n        off += 3;\n      }\n    }\n  }\n\n  geometry.addAttribute('color',\n    new THREE.BufferAttribute(colors, 3));\n  \n  var material = new THREE.PointsMaterial({\n    //color: 0x3399ff,\n    vertexColors: THREE.VertexColors,\n    size: 1.1,\n    opacity: 0.2,\n    sizeAttenuation: false,\n  });\n\n  var cloud = new THREE.Points(geometry, material);\n\n  return cloud;\n}\n\nPoints__Grid.createCamera = function(__) {\n  var renderer = __.renderer;\n  var {width, height} = renderer.domElement;\n  var s = 2.5;\n  var camera = new THREE.PerspectiveCamera( 45, width / height, 1, 100000 );\n  camera.position.set(- 100 * s,  - 100 * s , 100 * s);\n  camera.lookAt(new THREE.Vector3(0 * s, 0 * s, 0 * s));\n  camera.updateProjectionMatrix();\n  return camera;\n}\n\n\nfunction Points__Data__Fence(box, data) {\n  let {lay, row, col, cellsize, cellheight} = data;\n\n\n  let m = new THREE.MeshBasicMaterial({\n    color: data.fenceColor,\n    opacity: data.fenceOpacity,\n    side: THREE.DoubleSide,\n    transparent: true,\n  });\n\n  let pm = new THREE.MeshLambertMaterial({\n    color: 0x3399ff,\n  });\n\n\n  // build fence vertices array. \n\n  let vertices = new Float32Array(8 * 3);\n  \n  let x0 = col * cellsize / 2;\n  let y0 = lay * cellheight / 2;\n  let z0 = - row * cellsize / 2;\n\n  let o = 0;\n  for (var i = 0; i <= 1; ++i) { // x\n    for (var j = 0; j <= 1; ++j ) { // y\n      for (var k = 0; k <= 1; ++k ) { // z\n        vertices[o] = i * col * cellsize - x0;\n        vertices[o + 1] = j * lay * cellheight - y0;\n        vertices[o + 2] = - k * row * cellsize - z0;\n        o += 3;\n      }\n    }\n  }\n\n  let indices = Int16Array.from([\n    2, 0, 1, 2, 1, 3,\n    3, 1, 5, 3, 5, 7,\n    7, 4, 5, 7, 6, 4,\n    6, 0, 2, 6, 4, 0]);\n    // 0, 1, 5, 0, 5, 4]); bottom\n\n  indices = Int16Array.from([\n    0, 1, 5, 0, 5, 4]);\n\n  let geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', \n    new THREE.BufferAttribute(vertices, 3));\n  geometry.setIndex(\n    new THREE.BufferAttribute(indices, 1));\n\n  let fence = new THREE.Mesh(geometry, m);\n  // fence.add(new THREE.LineSegments(geometry, pm));\n  box.add(fence);\n\n  /*\n  let planes = [];\n\n  for (var i = 0; i < 2; ++i) {\n    planes[i] = new THREE.Mesh(\n      new THREE.PlaneBufferGeometry(\n        row * cellsize, lay * cellheight, 1, 1), m);\n  }\n  for (var i = 2; i < 4; ++i) {\n    planes[i] = new THREE.Mesh(\n      new THREE.PlaneBufferGeometry(\n        col * cellsize, lay * cellheight, 1, 1), m);\n  }\n\n  for (var i = 0; i < 4; ++i) {\n    box.add(planes[i]);\n  }\n  */\n}\n\n\nfunction Points__Data(__, data) {\n  data = _.merge({}, data, __.conf);\n\n  let {mass, lay, row, col, array:{length:arrlen}, array} = data;\n  let {cellsize, cellheight} = data;\n  let {points: totalPoints} = data;\n\n  let root = new THREE.Group();\n  let sum = 0;\n\n  for (var i = 0; i < arrlen; ++i) {\n    sum += array[i];\n  }\n  \n  sum = sum * 1.001;\n  let mratio = sum / totalPoints;\n\n  let vertices = new Float32Array(totalPoints * 3);\n\n  // console.log('cell', cellsize, cellheight);\n\n  let x0 = - col * cellsize / 2;\n  let y0 = - lay * cellheight / 2;\n  let z0 = row * cellsize / 2;\n\n  let c = 0, r = 0, l = 0, o = 0, m = 0, p = 0;\n  for (var i = 0; i < row * col * lay; ++i) {\n    m += array[i];\n    while(m > 0) {\n      vertices[o] = (c + Math.random()) * cellsize + x0;\n      vertices[o + 1] = (l * Math.random()) * cellheight + y0;\n      vertices[o + 2] = - (r + Math.random()) * cellsize + z0;\n      o += 3;\n      p += 1;\n      m -= mratio;\n    }\n\n    c += 1\n    if (c >= col) {\n      c = 0;\n      r += 1;\n      if (r >= row) {\n        l += 1;\n        r = 0;\n      }\n    }\n  }\n\n  let vertices0 = vertices.slice(0, p * 3);\n\n  let geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', \n    new THREE.BufferAttribute(vertices0, 3));\n  geometry.computeBoundingSphere();\n\n  let material = new THREE.PointsMaterial({\n    color: data.pointColor,\n    // vertexColors: THREE.VertexColors,\n    size: data.pointSize,\n    opacity: data.opacity,\n    sizeAttenuation: data.sizeAttenuation,\n  });\n\n  let mesh = new THREE.Points(geometry, material);\n  mesh.__data = data;\n  root.add(mesh);\n\n  /*\n  let bg = new THREE.BoxGeometry(col * cellsize, lay * cellheight, - row * cellsize);\n  let bm = new THREE.MeshBasicMaterial({\n    color: 0xff33aa,\n    wireframe: true,\n    opacity: 1,\n  });\n\n  let box = new THREE.Mesh(bg, bm);\n  root.add(box);\n  */\n  Points__Data__Fence(root, data);\n  // box.position.set(col * cellsize / 2, lay * cellheight / 2, - row * cellsize / 2);\n  return root;\n}\n\n\nPoints__Data.createCamera = function(__, data) {\n  data = _.merge({}, data, __.conf);\n  var renderer = __.renderer;\n  var {width, height} = renderer.domElement;\n  var {cellsize, cellheight, row, col, lay} = data;\n\n  var camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000000 );\n  camera.position.set(0, 0, row * cellsize * 2 );\n  camera.lookAt(\n    new THREE.Vector3(0, 0, 0));\n  camera.updateProjectionMatrix();\n  return camera;\n};\n\n\nexport var CLOUDS = {\n  grid0: Points__Grid,\n  data0: Points__Data,\n};\n\nexport function FetchData(u1, u2) {\n  let uinfo = u1;\n  let udata = u2;\n  if (!udata) {\n    udata = uinfo.replace('.json', '.data');\n  }\n\n  let pinfo = fetch(uinfo).then(response => response.json());\n  let pdata = fetch(udata).then(response => response.arrayBuffer());\n\n  return Promise.all([pinfo, pdata]).then(function(parr) {\n    var [info, data] = parr;\n    let array = new Float32Array(data);\n    info.array = array;\n    return info;\n  });\n}\n"]}