{"version":3,"sources":["/js/grid.ts"],"names":["Cube","Cube.constructor","Cube.createMeshes","Cube.updateMesh","Cube.createMainMaterial","Cube.createFence","Cube.createCamera","CircleTexture"],"mappings":"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","file":"grid.js","sourcesContent":["/// <reference path=\"../typings/index.d.ts\" />\nimport * as _ from 'lodash';\nimport * as THREE from 'three';\nimport 'colormap';\n\nlet colormap = require('colormap');\n\nexport class Cube extends THREE.Object3D {\n  __:any;\n  data:any;\n  refs:{ [key:string]:any; };\n\n  constructor(__:any, data?:any) {\n    super();\n    this.__ = __;\n    this.refs = {};\n    this.data = _.merge({}, data, __.conf);\n    this.createMeshes();\n    if (this.__.conf.fence.enabled) {\n      this.createFence();\n    }\n    this.updateMesh();\n  }\n\n\n  createMeshes():Cube {\n    let {__, data, refs} = this;\n    let {lay, row, col} = data;\n    let {cellsize, cellheight} = data;\n    let pointNumber = lay * row * col;\n\n    let vertices = new Float32Array(pointNumber * 3);\n    let normals = new Float32Array(pointNumber * 3);\n\n\n    let x0 = -col * cellsize / 2;\n    let y0 = -lay * cellheight / 2;\n    let z0 = -row * cellsize / 2;\n\n    let o = 0;\n    for (let li = 0; li < lay; ++li) {\n      for (let ri = 0; ri < row; ++ri) {\n        for (let ci = 0; ci < col; ++ci) {\n          vertices[o] = (ci + 0.5) * cellsize + x0;\n          vertices[o + 1] = (li + 0.5) * cellheight + y0;\n          vertices[o + 2] = -((ri + 0.5) * cellsize + z0);\n\n          normals[o] = 0;\n          normals[o + 1] = 1;\n          normals[o + 2] = 0;\n\n          o += 3;\n        }\n      }\n    }\n\n    let colors = new Float32Array(pointNumber * 3);\n    let alphas = new Float32Array(pointNumber * 3);\n\n    let geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position',\n      new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('color',\n      new THREE.BufferAttribute(colors, 3));\n    geometry.addAttribute('alpha',\n      new THREE.BufferAttribute(alphas, 1));\n    geometry.addAttribute('normal',\n      new THREE.BufferAttribute(normals, 3));\n\n    let material = this.createMainMaterial();\n    let main = new THREE.Points(geometry, material);\n\n    refs['main'] = main;\n    refs['mainGeometry'] = geometry;\n    refs['mainMaterial'] = material;\n\n    this.add(main);\n    return this;\n  }\n\n  updateMesh():Cube {\n    let {data, __, refs} = this;\n    let conf = __.conf;\n\n    let {lay, row, col, array} = data;\n    let {cellsize, cellheight} = data;\n\n    let {particle} = data;\n    let {number} =  particle;\n\n    let cmLevel = conf.colorLevel;\n\n    console.log('colormap', conf.colormap, cmLevel);\n\n    let cm = colormap({\n      colormap: conf.colormap,\n      nshades: cmLevel,\n      format: 'rgb'\n    });\n\n\n    console.log(\"cm\", cm.length);\n    console.log(\"cm\", cm);\n\n    let max = conf.colormapMaxValue;\n    let min = conf.colormapMinValue;\n\n\n    let range = max - min;\n    let geometry = refs['mainGeometry'] as THREE.BufferGeometry;\n\n\n    // let vertices = geometry.getAttribute('position').array;\n\n    let colors = geometry.getAttribute('color').array;\n    let alphas = geometry.getAttribute('alpha').array;\n\n    let o = 0;\n    let p = 0;\n    let oa = 0;\n    let c0 = 0;\n\n    for (let li = 0; li < lay; ++li) {\n      for (let ri = 0; ri < row; ++ri) {\n        for (let ci = 0; ci < col; ++ci) {\n          let cl = Math.floor((array[p] - min) * cmLevel / range);\n\n          cl += 4;\n          if (cl >= cmLevel) {\n            c0 += 1;\n            cl = cmLevel - 1;\n          } else if (cl < 0) {\n            cl = 0;\n          }\n\n          let color = cm[cl];\n\n          let cr = color[0] / 255,\n            cg = color[1] / 255,\n            cb = color[2] / 255;\n\n          colors[o] = cr;\n          colors[o + 1] = cg;\n          colors[o + 2] = cb;\n          o += 3;\n\n\n          alphas[oa] = cl / cmLevel * 0.5 + (cl * cl ) / (cmLevel * cmLevel) * 0.4 + 0.05;\n          // alphas[p] = cl * (cl + 4) /  (cmLevel * cmLevel )* 0.9 + 0.05;\n          oa += 1;\n          p += 1;\n        }\n      }\n    }\n\n    console.log(c0);\n    geometry.getAttribute('color').needsUpdate = true;\n    geometry.getAttribute('alpha').needsUpdate = true;\n\n    return this;\n  }\n\n  createMainMaterial():THREE.Material {\n    console.log('cube4 - material');\n    let points = THREE.ShaderLib.points;\n\n    points.vertexShader = points_vert;\n    points.fragmentShader = points_frag;\n\n    let particle = this.__.conf.particle;\n    let material = new THREE.PointsMaterial({\n      transparent: particle.transparent,\n      // blending: THREE.SubtractiveBlending,\n      // blending: THREE.AdditiveBlending,\n      // blending: THREE.NormalBlending,\n      // blending: THREE.MultiplyBlending,\n      vertexColors: THREE.VertexColors,\n\n      // opacity: particle.opacity,\n      sizeAttenuation: particle.sizeAttenuation,\n      side: THREE.DoubleSide,\n      // map: CircleTexture(),\n      // depthTest: true,\n      size: particle.size,\n    });\n\n    if (particle.alphaTest) {\n      material.alphaTest = particle.alphaTest;\n    }\n    return material;\n  }\n\n  createFence():Cube {\n    let data = this.data;\n    let {lay, row, col, cellsize, cellheight} = data;\n\n    let m = new THREE.MeshBasicMaterial({\n      color: data.fence.color,\n      opacity: data.fence.opacity,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n\n    if (data.fence.background) {\n      m.map = new THREE.TextureLoader().load(data.fence.background);\n    }\n\n\n    // build fence vertices array.\n    let vertices = new Float32Array(8 * 3);\n\n    let x0 = col * cellsize / 2;\n    let y0 = lay * cellheight / 2;\n    let z0 = -row * cellsize / 2;\n\n    let o = 0;\n    for (var i = 0; i <= 1; ++i) { // x\n      for (var j = 0; j <= 1; ++j) { // y\n        for (var k = 0; k <= 1; ++k) { // z\n          vertices[o] = i * col * cellsize - x0;\n          vertices[o + 1] = j * lay * cellheight - y0;\n          vertices[o + 2] = -k * row * cellsize - z0;\n          o += 3;\n        }\n      }\n    }\n\n    let indices = Int16Array.from([\n      2, 0, 1, 2, 1, 3,\n      3, 1, 5, 3, 5, 7,\n      7, 4, 5, 7, 6, 4,\n      6, 0, 2, 6, 4, 0]);\n\n    // 0, 1, 5, 0, 5, 4]); bottom\n\n    indices = Int16Array.from([\n      0, 1, 5, 0, 5, 4]);\n    let normals = Float32Array.from([\n      0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n      0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]);\n    let uvs = Float32Array.from([\n      0, 0, 0, 1, 0, 0, 0, 0,\n      1, 0, 1, 1, 0, 0, 0, 0]);\n\n    let geometry = new THREE.BufferGeometry();\n\n    geometry.addAttribute('position',\n      new THREE.BufferAttribute(vertices, 3));\n    geometry.setIndex(\n      new THREE.BufferAttribute(indices, 1));\n    geometry.addAttribute('uv',\n      new THREE.BufferAttribute(uvs, 2));\n    geometry.addAttribute('normal',\n      new THREE.BufferAttribute(normals, 3));\n\n    let fence = new THREE.Mesh(geometry, m);\n    // fence.add(new THREE.LineSegments(geometry, pm));\n    this.add(fence);\n    this.refs['fence'] = fence;\n\n    let boundaryGeometry = new THREE.BufferGeometry();\n\n    return this;\n  }\n\n  createCamera():THREE.Camera {\n    let {__, data} = this;\n\n    let renderer = __.renderer as THREE.WebGLRenderer;\n    let {width, height} = renderer.domElement;\n    let {cellsize, cellheight, row, col, lay} = data;\n    let camera = new THREE.PerspectiveCamera(30, width / height, 1, 10000000);\n    camera.position.set(0, 0, row * cellsize * 0.6);\n    camera.lookAt(\n      new THREE.Vector3(0, 0, 0));\n    camera.updateProjectionMatrix();\n    return camera;\n  }\n}\n\n\nlet points_vert = `\nuniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float alpha;\nvarying float vAlpha;\n\nvoid main() {\n  vAlpha = alpha;\n  #include <color_vertex>\n  #include <begin_vertex>\n  #include <project_vertex>\n  #ifdef USE_SIZEATTENUATION\n    gl_PointSize = size * ( scale / - mvPosition.z );\n  #else\n    gl_PointSize = size;\n  #endif\n  float size0 = size * (scale / - mvPosition.z);\n  if (size0 < 2.1) {\n    size0 = 2.1;\n  }  \n  gl_PointSize = size0;\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n  #include <worldpos_vertex>\n  #include <shadowmap_vertex>\n}\n`;\n\nlet points_frag = `\nuniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying float vAlpha;\nvoid main() {\n  #include <clipping_planes_fragment>\n  vec3 outgoingLight = vec3( 0.0 );\n  // vec4 diffuseColor = vec4( diffuse, opacity );\n  vec4 diffuseColor = vec4(diffuse, vAlpha);\n  #include <logdepthbuf_fragment>\n  #include <map_particle_fragment>\n  #include <color_fragment>\n  #include <alphatest_fragment>\n  outgoingLight = diffuseColor.rgb;\n  gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n}\n`;\n\n\nfunction CircleTexture():THREE.Texture {\n  let canvas = document.createElement('canvas');\n  let w = 256;\n  canvas.width = w;\n  canvas.height = w;\n\n  let ctx = canvas.getContext('2d');\n  ctx.imageSmoothingEnabled = false;\n\n  ctx.fillStyle = 'rgba(255, 255, 255, 0)';\n  ctx.fillRect(0, 0, w, w);\n  let PI2 = Math.PI * 2;\n  ctx.fillStyle = 'rgba(255, 255, 255, 255)';\n  ctx.beginPath();\n  ctx.arc(w / 2, w / 2, w / 2, 0, PI2, true);\n  ctx.fill();\n  let img = ctx.getImageData(0, 0, w, w);\n  let texture = new THREE.Texture(img);\n  texture.needsUpdate = true;\n  return texture;\n}\n"]}