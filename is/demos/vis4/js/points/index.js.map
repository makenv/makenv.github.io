{"version":3,"sources":["/js/points/index.js"],"names":[],"mappings":"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","file":"/js/points/index.js","sourcesContent":["import * as THREE from 'three';\nimport colormap from 'colormap';\nimport { _ } from 'lodash';\n\n\nclass Cloud extends THREE.Points {\n\tconstructor(geometry, material) {\n\t\tsuper(geometry, material);\n\t\tconsole.log('My Points');\n\t}\n}\n\n\nfunction CircleTexture() {\n  let canvas = document.createElement('canvas');\n  let w = 256;\n  canvas.width = w;\n  canvas.height = w;\n\n  let ctx = canvas.getContext('2d');\n  ctx.imageSmoothingEnabled = false;\n  \n  ctx.fillStyle = 'rgba(255, 255, 255, 0)';\n  ctx.fillRect(0, 0, w, w);\n  let PI2 = Math.PI * 2;\n  ctx.fillStyle = 'rgba(255, 255, 255, 255)';\n  ctx.beginPath();\n  ctx.arc(w / 2, w / 2, w / 2, 0, PI2, true);\n  ctx.fill();\n  let img = ctx.getImageData(0, 0, w, w);\n  let texture = new THREE.Texture(img);\n  texture.needsUpdate = true;\n  return texture;\n}\n\n\n\nclass Cube extends THREE.Object3D {\n  constructor(__, data) {\n    super();\n\n    this.root = __;\n    this.data = Object.assign({}, data, __.conf);\n    this.refs = {};\n  \n  \tif (__.conf.fence.enabled) {\n    \tthis.createFence();\n  \t}\n\n    this.createMeshes();\n    this.updateMeshes();\n    // this.update();\n  }\n\n  buildCloudMaterial() {\n    let particle = this.root.conf.particle;\n\n    let material = null;\n    material = new THREE.PointsMaterial({\n      alphaTest: particle.alphaTest,\n      transparent: particle.transparent,\n      // blending: THREE.AdditiveBlending,\n      vertexColors: THREE.VertexColors,\n      \n      opacity: particle.opacity,\n      sizeAttenuation: particle.sizeAttenuation,\n      side: THREE.DoubleSide,\n      map: CircleTexture(),\n\n      depthTest: true,\n      size: particle.size,\n    });\n    return material;\n  }\n\n  createMeshes() {\n    let { refs, data, root:__, root:{conf}} = this;\n    let { particle } = data;\n    let { number } = particle;\n\n    let vertices = new Float32Array(number * 3);\n    let colors = new Float32Array(number * 3);\n\n    for (var i = 0; i < number * 3; ++i) {\n      vertices[i] = -99999999;\n    }\n\n    let geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', \n      new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', \n      new THREE.BufferAttribute(colors, 3));\n\n    let material = this.buildCloudMaterial();\n\n    refs.mainGeometry = geometry;\n    refs.mainMaterial = material;\n\n    refs.main = new Cloud(geometry, material);\n    this.add(refs.main);\n    return this;\n  }\n\n  updateMeshes() {\n    let { data, root:__, refs} = this;\n    let conf = __.conf;\n\n    let { mass, lay, row, col, array } = data;\n    let { length:arrlen } = array;\n    let { cellsize, cellheight } = data;\n    let { particle } = data;\n    let { number } = particle;\n\n\n    let cmLevel = conf.colorLevel;\n    let cm = colormap({\n      colormap: conf.colormap,\n      nshades: cmLevel,\n      format: 'rgb',\n    });\n\n    let sum = 0;\n\n    let sum2 = 0;\n    let nonzero = 0;\n    let max = 0, min = 0;\n\n    for (var i = 0; i < arrlen; ++i) {\n      sum += array[i];\n      if (array[i] > 0) {\n      \tsum2 += array[i];\n      \tnonzero += 1;\n      }\n      if (array[i] > max) {\n      \tmax = array[i];\n      }\n    }\n    \n   \n    sum = sum * 1.001;\n    let mratio = sum / particle.number;\n    mratio = conf.mass / particle.number;\n    /*\n    console.log(\"stat\", sum, sum2, mratio, nonzero, sum2 / nonzero, max);\n    max = max * 0.6;\n    */\n    max = conf.colormapMaxValue;\n    min = conf.colormapMinValue;\n    let range = max - min;\n\n    let geometry = refs.mainGeometry;\n\n    let vertices = geometry.getAttribute('position').array;\n    let colors = geometry.getAttribute('color').array;\n\n    // console.log('cell', cellsize, cellheight);\n\n    let x0 = - col * cellsize / 2;\n    let y0 = - lay * cellheight / 4;\n    let z0 = row * cellsize / 2;\n\n    let c = 0, r = 0, l = 0, o = 0, m = 0, p = 0;\n    for (var i = 0; i < row * col * lay; ++i) {\n      m += array[i];\n      // m = array[i];\n\n      let cl = Math.floor((array[i] - min) / range * cmLevel);\n      if (cl >= cmLevel) {\n      \tcl = cmLevel - 1;\n      }\n      if (cl < 0) {\n        cl = 0;\n      }\n\n\t\t\tlet color = cm[cl];\n\t\t\tlet cr = color[0] / 255;\n\t\t\tlet cg = color[1] / 255;\n\t\t\tlet cb = color[2] / 255;\n\n      while(m >  mratio) {\n        vertices[o] = (c + Math.random()) * cellsize + x0;\n\n        vertices[o + 1] = (l + Math.random()) * cellheight + y0;\n        // vertices[o + 1] = (l) * cellheight + y0;\n        vertices[o + 1] = (l + Math.random() * 0.75 + 0.25) * cellheight + y0;\n        \n        vertices[o + 2] = - (r + Math.random()) * cellsize + z0;\n\n        colors[o] = cr;\n        colors[o + 1] = cg;\n        colors[o + 2] = cb;\n\n        o += 3;\n        p += 1;\n        m -= mratio;\n      }\n\n      c += 1\n      if (c >= col) {\n        c = 0;\n        r += 1;\n        if (r >= row) {\n          l += 1;\n          r = 0;\n        }\n      }\n    }\n\n    console.log(\"P0\", p, particle.number);\n    for (; o < number * 3; o++) {\n      vertices[o] = -99999999;\n      vertices[o + 1] = -99999999;\n      vertices[o + 2] = -99999999;\n      o += 3;\n    }\n\n    geometry.getAttribute('position').needsUpdate = true;\n    geometry.getAttribute('color').needsUpdate = true;\n    geometry.computeBoundingSphere();\n\n    return this;\n  } // updateMeshes\n\n\n  createFence() {\n    let data = this.data;\n    let {lay, row, col, cellsize, cellheight} = data;\n    \n    let m = new THREE.MeshBasicMaterial({\n      color: data.fence.color,\n      opacity: data.fence.opacity,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n\n    if (data.fence.background) {\n      m.map = new THREE.TextureLoader().load(data.fence.background);\n    }\n\n    \n    // build fence vertices array. \n    let vertices = new Float32Array(8 * 3);\n    \n    let x0 = col * cellsize / 2;\n    let y0 = lay * cellheight / 2;\n    let z0 = - row * cellsize / 2;\n\n    let o = 0;\n    for (var i = 0; i <= 1; ++i) { // x\n      for (var j = 0; j <= 1; ++j ) { // y\n        for (var k = 0; k <= 1; ++k ) { // z\n          vertices[o] = i * col * cellsize - x0;\n          vertices[o + 1] = j * lay * cellheight - y0;\n          vertices[o + 2] = - k * row * cellsize - z0;\n          o += 3;\n        }\n      }\n    }\n\n    let indices = Int16Array.from([\n      2, 0, 1, 2, 1, 3,\n      3, 1, 5, 3, 5, 7,\n      7, 4, 5, 7, 6, 4,\n      6, 0, 2, 6, 4, 0]);\n\n      // 0, 1, 5, 0, 5, 4]); bottom\n\n    indices = Int16Array.from([\n      0, 1, 5, 0, 5, 4]);\n    let normals = Float32Array.from([\n      0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n      0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]);\n    let uvs = Float32Array.from([\n      0, 0, 0, 1, 0, 0, 0, 0,\n      1, 0, 1, 1, 0, 0, 0, 0]);\n    \n    let geometry = new THREE.BufferGeometry();\n\n    geometry.addAttribute('position', \n      new THREE.BufferAttribute(vertices, 3));\n    geometry.setIndex(\n      new THREE.BufferAttribute(indices, 1));\n    geometry.addAttribute('uv', \n      new THREE.BufferAttribute(uvs, 2));\n    geometry.addAttribute('normal',\n      new THREE.BufferAttribute(normals, 3));\n\n    let fence = new THREE.Mesh(geometry, m);\n    // fence.add(new THREE.LineSegments(geometry, pm));\n    this.add(fence);\n    this.refs.fence = fence;\n    return this;\n  }\n\n\n  createCamera() {\n    let {root:__, data} = this;\n\n    var renderer = __.renderer;\n    var {width, height} = renderer.domElement;\n    var {cellsize, cellheight, row, col, lay} = data;\n\n    var camera = new THREE.PerspectiveCamera(30, width / height, 1, 10000000 );\n    camera.position.set(0, 0, row * cellsize * 3.0 );\n    camera.lookAt(\n      new THREE.Vector3(0, 0, 0));\n    camera.updateProjectionMatrix();\n    return camera;\n  }\n\n  update(data) {\n    this.data = _.merge({}, data, this.root.conf);\n    return this.updateMeshes();\n  }\n}\n\n\nlet vertexShader = `\n  attribute float alpha;\n  varying float vAlpha;\n\n  void main() {\n    vAlpha = alpha;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    gl_PointSize = 8.0;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`;\n\nlet fragmentShader = `\n  uniform vec3 color;\n  varying float vAlpha;\n  void main() {\n    gl_FragColor = vec4( color, vAlpha );\n  }\n`;\n\nlet points_vert = `\nuniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float alpha;\nvarying float vAlpha;\n\nvoid main() {\n  vAlpha = alpha;\n  #include <color_vertex>\n  #include <begin_vertex>\n  #include <project_vertex>\n  #ifdef USE_SIZEATTENUATION\n    gl_PointSize = size * ( scale / - mvPosition.z );\n  #else\n    gl_PointSize = size;\n  #endif\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n  #include <worldpos_vertex>\n  #include <shadowmap_vertex>\n}\n`;\n\nlet points_frag = `\nuniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying float vAlpha;\nvoid main() {\n  #include <clipping_planes_fragment>\n  vec3 outgoingLight = vec3( 0.0 );\n  // vec4 diffuseColor = vec4( diffuse, opacity );\n  vec4 diffuseColor = vec4(diffuse, vAlpha);\n  #include <logdepthbuf_fragment>\n  #include <map_particle_fragment>\n  #include <color_fragment>\n  #include <alphatest_fragment>\n  outgoingLight = diffuseColor.rgb;\n  gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n}\n`;\n\n\nclass Cube4 extends Cube {\n  buildCloudMaterial() {\n    console.log('cube4 - material');\n    let points = THREE.ShaderLib.points;\n    console.log(points);\n    points.vertexShader = points_vert;\n    points.fragmentShader = points_frag;\n\n    let particle = this.root.conf.particle;\n\n    let material = null;\n    material = new THREE.PointsMaterial({\n      transparent: particle.transparent,\n      // blending: THREE.SubtractiveBlending,\n      // blending: THREE.AdditiveBlending,\n      // blending: THREE.NormalBlending,\n      // blending: THREE.MultiplyBlending,\n      vertexColors: THREE.VertexColors,\n      \n      opacity: particle.opacity,\n      sizeAttenuation: particle.sizeAttenuation,\n      // side: THREE.DoubleSide,\n      // map: CircleTexture(),\n\n      depthTest: true,\n      size: particle.size,\n    });\n    if (particle.alphaTest) {\n      material.alphaTest = particle.alphaTest;\n    }\n    return material;\n  }\n\n\n    createMeshes() {\n    let { refs, data, root:__, root:{conf}} = this;\n    let { particle } = data;\n    let { number } = particle;\n\n    let vertices = new Float32Array(number * 3);\n    let colors = new Float32Array(number * 3);\n    let alphas = new Float32Array(number);\n\n    for (var i = 0; i < number * 3; ++i) {\n      vertices[i] = -99999999;\n    }\n\n    let geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', \n      new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', \n      new THREE.BufferAttribute(colors, 3));\n    geometry.addAttribute('alpha',\n      new THREE.BufferAttribute(alphas, 1));\n\n    let material = this.buildCloudMaterial();\n\n    refs.mainGeometry = geometry;\n    refs.mainMaterial = material;\n\n    refs.main = new Cloud(geometry, material);\n    this.add(refs.main);\n    return this;\n  }\n\n  updateMeshes() {\n    let { data, root:__, refs} = this;\n    let conf = __.conf;\n\n    let { mass, lay, row, col, array } = data;\n    let { length:arrlen } = array;\n    let { cellsize, cellheight } = data;\n    let { particle } = data;\n    let { number } = particle;\n\n\n    let cmLevel = conf.colorLevel;\n    let cm = colormap({\n      colormap: conf.colormap,\n      nshades: cmLevel,\n      format: 'rgb',\n    });\n\n    let sum = 0;\n\n    let sum2 = 0;\n    let nonzero = 0;\n    let max = 0, min = 0;\n\n    for (var i = 0; i < arrlen; ++i) {\n      sum += array[i];\n      if (array[i] > 0) {\n        sum2 += array[i];\n        nonzero += 1;\n      }\n      if (array[i] > max) {\n        max = array[i];\n      }\n    }\n    \n   \n    sum = sum * 1.001;\n    let mratio = sum / particle.number;\n    mratio = conf.mass / particle.number;\n    /*\n    console.log(\"stat\", sum, sum2, mratio, nonzero, sum2 / nonzero, max);\n    max = max * 0.6;\n    */\n    max = conf.colormapMaxValue;\n    min = conf.colormapMinValue;\n    let range = max - min;\n\n    let geometry = refs.mainGeometry;\n\n    let vertices = geometry.getAttribute('position').array;\n    let colors = geometry.getAttribute('color').array;\n    let alphas = geometry.getAttribute('alpha').array;\n\n    // console.log('cell', cellsize, cellheight);\n\n    let x0 = - col * cellsize / 2;\n    let y0 = - lay * cellheight / 2;\n    let z0 = row * cellsize / 2;\n\n    let c = 0, r = 0, l = 0, o = 0, m = 0, p = 0;\n    for (var i = 0; i < row * col * lay; ++i) {\n      m += array[i];\n      // m = array[i];\n\n      let cl = Math.floor((array[i] - min) / range * cmLevel);\n      if (cl >= cmLevel) {\n        cl = cmLevel - 1;\n      }\n      if (cl < 0) {\n        cl = 0;\n      }\n\n      let color = cm[cl];\n      let cr = color[0] / 255;\n      let cg = color[1] / 255;\n      let cb = color[2] / 255;\n\n      while(m >  mratio) {\n        vertices[o] = (c + Math.random() * 0.01 + 0.5) * cellsize + x0;\n\n        vertices[o + 1] = (l + Math.random()) * cellheight + y0;\n        // vertices[o + 1] = (l) * cellheight + y0;\n        vertices[o + 1] = (l + Math.random() * 0.925 + 0.05) * cellheight + y0;\n        \n        vertices[o + 2] = - (r + Math.random() * 0.01 + 0.5) * cellsize + z0;\n\n        colors[o] = cr;\n        colors[o + 1] = cg;\n        colors[o + 2] = cb;\n\n        alphas[p] = cl / cmLevel * 0.8 + 0.1;\n\n        o += 3;\n        p += 1;\n        m -= mratio;\n      }\n\n      c += 1\n      if (c >= col) {\n        c = 0;\n        r += 1;\n        if (r >= row) {\n          l += 1;\n          r = 0;\n        }\n      }\n    }\n\n    console.log(\"P0\", p, particle.number);\n    for (; o < number * 3; o++) {\n      vertices[o] = -99999999;\n      vertices[o + 1] = -99999999;\n      vertices[o + 2] = -99999999;\n      o += 3;\n    }\n\n    geometry.getAttribute('position').needsUpdate = true;\n    geometry.getAttribute('color').needsUpdate = true;\n    geometry.getAttribute('alpha').needsUpdate = true;\n    geometry.computeBoundingSphere();\n\n    return this;\n  } // updateMeshes\n\n}\n\n// -- from common.js\nexport {\n  Cube,\n  Cube4,\n};\n"]}