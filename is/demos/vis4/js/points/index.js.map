{"version":3,"sources":["/js/points/index.js"],"names":[],"mappings":"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","file":"/js/points/index.js","sourcesContent":["import * as THREE from 'three';\nimport colormap from 'colormap';\n\nvar cmLevel = 24;\nvar cm = colormap({\n  colormap: 'portland',\n  // colormap: 'picnic',\n  // colormap: 'jet',\n  nshades: 24,\n  format: 'rgb',\n});\n\nconsole.log(cm[23]);\nconsole.log(new THREE.Color(cm[23]));\n\nclass Cloud extends THREE.Points {\n\tconstructor(geometry, material) {\n\t\tsuper(geometry, material);\n\t\tconsole.log('My Points');\n\t}\n}\n\n\nfunction CircleTexture() {\n  let canvas = document.createElement('canvas');\n  let w = 256;\n  canvas.width = w;\n  canvas.height = w;\n\n  let ctx = canvas.getContext('2d');\n  ctx.imageSmoothingEnabled = false;\n  \n  ctx.fillStyle = 'rgba(255, 255, 255, 0)';\n  ctx.fillRect(0, 0, w, w);\n  let PI2 = Math.PI * 2;\n  ctx.fillStyle = 'rgba(255, 255, 255, 255)';\n  ctx.beginPath();\n  ctx.arc(w / 2, w / 2, w / 2, 0, PI2, true);\n  ctx.fill();\n  let img = ctx.getImageData(0, 0, w, w);\n  let texture = new THREE.Texture(img);\n  texture.needsUpdate = true;\n  return texture;\n}\n\n\n\nclass Cube extends THREE.Object3D {\n  constructor(__, data) {\n    super();\n    this.root = __;\n    this.data = Object.assign({}, data, __.conf);\n    this.sub = {};\n  \n  \tif (__.conf.fence) {\n    \tthis.buildFence();\n  \t}\n\n    this.buildCloud();\n  }\n\n\n  buildCloud() {\n    let { data, root:__ } = this;\n\n    let {mass, lay, row, col, array:{length:arrlen}, array} = data;\n    let {cellsize, cellheight} = data;\n    let {points: totalPoints} = data;\n\n    let root = new THREE.Group();\n    let sum = 0;\n\n    let sum2 = 0;\n    let nonzero = 0;\n    let max = 0;\n\n    for (var i = 0; i < arrlen; ++i) {\n      sum += array[i];\n      if (array[i] > 0) {\n      \tsum2 += array[i];\n      \tnonzero += 1;\n      }\n      if (array[i] > max) {\n      \tmax = array[i];\n      }\n    }\n    \n    sum = sum * 1.001;\n    let mratio = sum / totalPoints;\n    console.log(\"stat\", sum, sum2, mratio, nonzero, sum2 / nonzero, max);\n    max = max * 0.6;\n\n    let vertices = new Float32Array(totalPoints * 3);\n    let colors = new Float32Array(totalPoints * 3);\n\n    // console.log('cell', cellsize, cellheight);\n\n    let x0 = - col * cellsize / 2;\n    let y0 = - lay * cellheight / 2;\n    let z0 = row * cellsize / 2;\n\n    let c = 0, r = 0, l = 0, o = 0, m = 0, p = 0;\n    for (var i = 0; i < row * col * lay; ++i) {\n      m += array[i];\n      let cl = Math.floor(array[i] / max * cmLevel);\n      if (cl >= cmLevel) {\n      \tcl = cmLevel - 1;\n      }\n\n\t\t\tlet color = cm[cl];\n\t\t\tlet cr = color[0] / 255;\n\t\t\tlet cg = color[1] / 255;\n\t\t\tlet cb = color[2] / 255;\n\n      while(m > 0) {\n        vertices[o] = (c + Math.random()) * cellsize + x0;\n        vertices[o + 1] = (l + Math.random()) * cellheight + y0;\n        vertices[o + 1] = (l) * cellheight + y0;\n        vertices[o + 1] = (l + Math.random() * 0.5) * cellheight + y0;\n        \n        vertices[o + 2] = - (r + Math.random()) * cellsize + z0;\n\n        colors[o] = cr;\n        colors[o + 1] = cg;\n        colors[o + 2] = cb;\n\n        o += 3;\n        p += 1;\n        m -= mratio;\n      }\n\n      c += 1\n      if (c >= col) {\n        c = 0;\n        r += 1;\n        if (r >= row) {\n          l += 1;\n          r = 0;\n        }\n      }\n    }\n\n    let vertices0 = vertices.slice(0, p * 3);\n    let colors0 = colors.slice(0, p * 3);\n\n    let geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', \n      new THREE.BufferAttribute(vertices0, 3));\n    geometry.addAttribute('color', \n      new THREE.BufferAttribute(colors0, 3));\n    geometry.computeBoundingSphere();\n\n    let material = null;\n    // let sprite = new THREE.TextureLoader().load(\"textures/sprites/circle.png\");\n    let texture = CircleTexture();\n    material = new THREE.PointsMaterial({\n      // alphaTest: 0.5,\n      transparent: true,\n      // blending: THREE.AdditiveBlending,\n      // color: 0x88aabb,\n      // color: data.pointColor,\n      vertexColors: THREE.VertexColors,\n      size: data.pointSize,\n      opacity: data.opacity,\n      sizeAttenuation: data.sizeAttenuation,\n      // map: CircleTexture(),\n    });\n\n    // material.map = new THREE.TextureLoader().load(\"textures/sprites/circle.png\")\n    material.map = CircleTexture();\n\n\n    console.log(material);\n    //  let mesh = new THREE.Points(geometry, material);\n    let mesh = new Cloud(geometry, material);\n    this.sub.cloud = mesh;\n    this.add(mesh);\n    return this;\n  } // buildCloud\n\n\n  buildFence() {\n    let data = this.data;\n    let {lay, row, col, cellsize, cellheight} = data;\n    let m = new THREE.MeshBasicMaterial({\n      color: data.fenceColor,\n      opacity: data.fenceOpacity,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n\n    /*\n    m = new THREE.MeshLambertMaterial({\n      color: data.fenceColor,\n      opacity: data.fenceOpacity,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n    */\n\n    \n    // build fence vertices array. \n    let vertices = new Float32Array(8 * 3);\n    \n    let x0 = col * cellsize / 2;\n    let y0 = lay * cellheight / 2;\n    let z0 = - row * cellsize / 2;\n\n    let o = 0;\n    for (var i = 0; i <= 1; ++i) { // x\n      for (var j = 0; j <= 1; ++j ) { // y\n        for (var k = 0; k <= 1; ++k ) { // z\n          vertices[o] = i * col * cellsize - x0;\n          vertices[o + 1] = j * lay * cellheight - y0;\n          vertices[o + 2] = - k * row * cellsize - z0;\n          o += 3;\n        }\n      }\n    }\n\n    let indices = Int16Array.from([\n      2, 0, 1, 2, 1, 3,\n      3, 1, 5, 3, 5, 7,\n      7, 4, 5, 7, 6, 4,\n      6, 0, 2, 6, 4, 0]);\n\n      // 0, 1, 5, 0, 5, 4]); bottom\n\n    indices = Int16Array.from([\n      0, 1, 5, 0, 5, 4]);\n    \n    let geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', \n      new THREE.BufferAttribute(vertices, 3));\n    geometry.setIndex(\n      new THREE.BufferAttribute(indices, 1));\n\n    let fence = new THREE.Mesh(geometry, m);\n    // fence.add(new THREE.LineSegments(geometry, pm));\n    this.add(fence);\n    this.sub.fence = fence;\n    return this;\n  }\n\n\n  createCamera() {\n    let {root:__, data} = this;\n\n    var renderer = __.renderer;\n    var {width, height} = renderer.domElement;\n    var {cellsize, cellheight, row, col, lay} = data;\n\n    var camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000000 );\n    camera.position.set(0, 0, row * cellsize * 1.4 );\n    camera.lookAt(\n      new THREE.Vector3(0, 0, 0));\n    camera.updateProjectionMatrix();\n    return camera;\n  }\n}\n\n\n// -- from common.js\nexport {\n  Cube,\n};\n"]}